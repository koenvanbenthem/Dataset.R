In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "vector",#
		Birth = "integer"#
	)#
)
a<-new(Class="Lepricorn")
a
a$ID<-9.8
a$ID<-9
a<-new(Class="Lepricorn",ID=9.8)
a<-new(Class="Lepricorn",ID=9)
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "numeric",#
		pID = "vector",#
		Birth = "numeric"#
	)#
)
a<-new(Class="Lepricorn",ID=9)
a
a$ID
a.ID
a@ID
a@pID<-c(2,2)
a
a@Birth<-c(2,2)
a
a<-new(Class="Lepricorn",ID=9)
a<-new(Class="Lepricorn",ID=9,pID=c(2,2))
a<-new(Class="Lepricorn",ID=9,pID=c(2,2),Birth=c(2,2))
a
a<-new(Class="Lepricorn",ID=9,pID=c(2,2),Birth=a)
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "numeric",#
		pID = "vector",#
		Birth = "numeric"#
	)#
	prototype=prototype(#
		ID = NA,#
		pID = c(NA,NA),#
		Birth = NA#
	)#
)
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "numeric",#
		pID = "vector",#
		Birth = "numeric"#
	),#
	prototype=prototype(#
		ID = NA,#
		pID = c(NA,NA),#
		Birth = NA#
	)#
)
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "numeric",#
		pID = "vector",#
		Birth = "numeric",#
		alive = "boolean"#
	),#
	prototype=prototype(#
		ID = -1,#
		pID = c(-1,-1),#
		Birth = -1,#
		alive = TRUE#
	)#
)
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "numeric",#
		pID = "vector",#
		Birth = "numeric",#
		alive = "bool"#
	),#
	prototype=prototype(#
		ID = -1,#
		pID = c(-1,-1),#
		Birth = -1,#
		alive = TRUE#
	)#
)
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "numeric",#
		pID = "vector",#
		Birth = "numeric",#
		alive = "logical"#
	),#
	prototype=prototype(#
		ID = -1,#
		pID = c(-1,-1),#
		Birth = -1,#
		alive = TRUE#
	)#
)
a<-new("Lepricorn")
a
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		Birth = "integer",#
		alive = "logical"#
	)#
)
slotNames(Lepricorn)
slotNames("Lepricorn")
getSlots("Lepricorn")
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		Birth = "integer",#
		alive = "logical"#
	)#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("print","Lepricorn"){#
	function(x,...){#
		cat(ID,"\t(",x@pID[1],x@pID[2],")\t",x@Birth,"\t",x@alive,"\n")#
	}#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		Birth = "integer",#
		alive = "logical"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn"){#
	function(x){#
		cat(ID,"\t(",x@pID[1],x@pID[2],")\t",x@Birth,"\t",x@alive,"\n")#
	}#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		Birth = "integer",#
		alive = "logical"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn"){#
	function(x){#
		cat(ID,"\t(")#
	}#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		Birth = "integer",#
		alive = "logical"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn"){#
	function(x){#
		cat(ID,"\t(")#
	}#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		Birth = "integer",#
		alive = "logical"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn"){#
	function(x){#
		cat(ID,"\t(")#
	}#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		Birth = "integer",#
		alive = "logical"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn",#
	function(x){#
		cat(ID,"\t(",x@pID[1],x@pID[2],")\t",x@Birth,"\t",x@alive,"\n")#
	}#
)
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		Birth = "integer",#
		alive = "logical"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t(",object@pID[1],object@pID[2],")\t",object@Birth,"\t",object@alive,"\n")#
	}#
)
a<-new("Lepricorn")
a
a@ID<-1
a@ID<-as.integer(1)
a@pID[1]<-as.integer(2)
a@pID[2]<-as.integer(3)
a@alive=TRUE
a
a@Birth<-as.integer(10)
a
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		Birth = "integer",#
		alive = "logical"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t(",object@pID[1],object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)
a
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		Birth = "integer",#
		alive = "logical"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)
a
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)
a
a<-new("Lepricorn")
a
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-1#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object){#
	.Object@age<-0#
	.Object@ID<-CID#
	CID<-CID+1#
})
a<-new("Lepricorn")
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object){#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	CID<-CID+1#
})
a<-new("Lepricorn")
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object){#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	CID<-CID+1#
	return(.Object)#
})
a<-new("Lepricorn")
b<-new("Lepricorn")
a
b
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object){#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	CID<<-CID+1#
	return(.Object)#
})
a<-new("Lepricorn")
b<-new("Lepricorn")
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object){#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})
b<-new("Lepricorn")
a<-new("Lepricorn")
a
b
a<-new("Lepricorn")
a
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object,parent1,parent2){#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(parent1,parent2)#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})
a<-new("Lepricorn",1,2)
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object,parent1,parent2){#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})
a<-new("Lepricorn",1,2)
a
a<-new("Lepricorn",3,5)
a
CID
T
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
################ Counter for the current year#
YR<-0#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object,parent1,parent2){#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
################ Counter for the current year#
YR<-0#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object,parent1,parent2){#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-20#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})
a<-new("Lepricorn")
a<-new("Lepricorn",NA,NA)
a
d<-c(a,a)
d
getClass(d)
str(d)
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
################ Counter for the current year#
YR<-0#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and such)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object,parent1,parent2){#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-20#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
setMethod("counti","Lepricorn",function(Object){#
return(0)#
})
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
################ Counter for the current year#
YR<-0#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA}#
	if(missing(parent2)){parnet2<-NA}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-20#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
set#
setMethod("")
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
################ Counter for the current year#
YR<-0#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA}#
	if(missing(parent2)){parnet2<-NA}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-20#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
set#
setMethod("")
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
################ Counter for the current year#
YR<-0#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA}#
	if(missing(parent2)){parnet2<-NA}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-20#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})
a<-new("Lepricorn")
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
################ Counter for the current year#
YR<-0#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA}#
	if(missing(parent2)){parent2<-NA}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-20#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})
a<-new("Lepricorn")
b<-new("Lepricorn",1,2)
a
b
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
################ Counter for the current year#
YR<-0#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA, weight1<-5}else{weight1<-pop[parent1]@size}#
	if(missing(parent2)){parent2<-NA, weight2<-5}else{weight2<-pop[parent2]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
############### Creating an initial population with
pop<-c(a,a)
pop
pop[1]
pop[1]@size
pop[][1]]@size
pop[[1]]@size
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
################ Counter for the current year#
YR<-0#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA, weight1<-5}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA, weight2<-5}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
############### Creating an initial population with
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
################ Counter for the current year#
YR<-0#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
############### Creating an initial population with
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
################ Counter for the current year#
YR<-0#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Lepricorn"))#
for(i in 2:10){#
	pop<-c(pop,new("Lepricorn"))#
}
pop
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object: an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  - ID (unique identifier number)																	[integer]#
#  - pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  - Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  - alive (boolean, true/false)																	[boolean]#
#  - age (timesteps since birth)																	[integer]#
#  - size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
################ Counter for the IDs#
CID<-as.integer(1)#
#
################ Counter for the current year#
YR<-0#
#
############### Definition of the class#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Lepricorn"))#
for(i in 2:10){#
	pop<-c(pop,new("Lepricorn"))#
}
pop
length(d)
length(pop)
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Lepricorn": an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Lepricorn"))#
for(i in 2:10){#
	pop<-c(pop,new("Lepricorn"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Lepricorns\n")	#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Lepricorn": an individual of our species of interest, the Irish lepricorn, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the lepricorn, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Lepricorn",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Lepricorn",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Lepricorn",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Lepricorn"))#
for(i in 2:10){#
	pop<-c(pop,new("Lepricorn"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Lepricorns\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@sex<-#
	.Object@size<-0.5*weight1+0.5*weight2#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@sex<-'a'#
	.Object@size<-0.5*weight1+0.5*weight2#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'F'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
pop[[9]]@sex
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'F'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
pop
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
pop
log(2)
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age)+(-1+exp(age*log(2)/20))#
	return(p)#
}#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
x<-seq(0,20,1)
plot(x,bathtub(x))
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	return(p)#
}#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
plot(x,bathtub(x))
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(1.5)/20))#
	return(p)#
}#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1.5+exp(age*log(1.5)/20))#
	return(p)#
}#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
plot(x,bathtub(x))
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1.5+exp(age*log(2.5)/20))#
	return(p)#
}#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
plot(x,bathtub(x))
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-0.5+exp(age*log(1.5)/20))#
	return(p)#
}#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
plot(x,bathtub(x))
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	return(p)#
}#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
plot(x,bathtub(x))
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	return(min(p,1))#
}#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
plot(x,bathtub(x))
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	return(min(p,1))#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
plot(x,bathtub(x))
bathtub(10)
bathtub(21)
bathtub(22)
bathtub(2)
bathtub(1)
bathtub(x)
x
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-min(1,0.6*exp(-age/4)+(-1+exp(age*log(2)/20)))#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
bathtub(x)
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
bathtub(2)
bathtub(21)
bathtub(22)
bathtub(x)
plot(x,bathtub(x))
x<-seq(0,25,1)
plot(x,bathtub(x))
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(pop),"Leprechauns\n-----------------\n")#
	#### Surival#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("At the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		Surv(pop[[i]])#
	}#
	#### Growth#
	#### Reproduction#
}
ALIVE
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:10){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		Surv(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
})#
#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:1000){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		Surv(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
})#
#
# Simple function, simply adds 1 to the age#
setGeneric("Age",function(Object){standarGeneric("Age")})#
#
setMethod("Age","Leprechaun",function(Object){#
	Object@Age<-Object@Age+1	#
})#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:100){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		Surv(pop[[i]])#
		Age(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
})#
#
# Simple function, simply adds 1 to the age#
setGeneric("Age",function(Object){standarGeneric("Age")})#
#
setMethod("Age","Leprechaun",function(Object){#
	Object@age<-Object@age+1	#
})#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:100){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		Surv(pop[[i]])#
		Age(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
})#
#
# Simple function, simply adds 1 to the age#
setGeneric("Age",function(Object){standarGeneric("Age")})#
#
setMethod("Age","Leprechaun",function(Object){#
	Object@age<-as.integer(Object@age+1)	#
})#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:100){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		Surv(pop[[i]])#
		Age(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
pop
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standarGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
	return(Object)#
})#
#
# Simple function, simply adds 1 to the age#
setGeneric("Age",function(Object){standarGeneric("Age")})#
#
setMethod("Age","Leprechaun",function(Object){#
	Object@age<-as.integer(Object@age+1)#
	return(Object)#
})#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:100){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		Surv(pop[[i]])#
		Age(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
pop
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv<-",function(Object){standarGeneric("Surv<-")})#
#
setMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
	return(Object)#
})#
#
# Simple function, simply adds 1 to the age#
setGeneric("Age<-",function(Object){standarGeneric("Age<-")})#
#
setMethod("Age","Leprechaun",function(Object){#
	Object@age<-as.integer(Object@age+1)#
	return(Object)#
})#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:100){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		Surv(pop[[i]])#
		Age(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
pop
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv<-",function(Object){standarGeneric("Surv<-")})#
#
setReplaceMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
	return(Object)#
})#
#
# Simple function, simply adds 1 to the age#
setGeneric("Age<-",function(Object){standarGeneric("Age<-")})#
#
setReplaceMethod("Age","Leprechaun",function(Object){#
	Object@age<-as.integer(Object@age+1)#
	return(Object)#
})#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:100){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		Surv(pop[[i]])#
		Age(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
pop
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("setalive<-",function(Object){standarGeneric("setalive<-")})#
#
setReplaceMethod("setalive","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
	return(Object)#
})#
#
# Simple function, simply adds 1 to the age#
setGeneric("Age<-",function(Object){standarGeneric("Age<-")})#
#
setReplaceMethod("Age","Leprechaun",function(Object){#
	Object@age<-as.integer(Object@age+1)#
	return(Object)#
})#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:100){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		setalive(pop[[i]])#
		Age(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv<-",function(Object){standarGeneric("Surv<-")})#
#
setReplaceMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
	return(Object)#
})#
#
# Simple function, simply adds 1 to the age#
setGeneric("Age<-",function(Object){standarGeneric("Age<-")})#
#
setReplaceMethod("Age","Leprechaun",function(Object){#
	Object@age<-as.integer(Object@age+1)#
	return(Object)#
})#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:100){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		Surv(pop[[i]])#
		Age(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
pop
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv<-",function(Object){standardGeneric("Surv<-")})#
#
setReplaceMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
	return(Object)#
})#
#
# Simple function, simply adds 1 to the age#
setGeneric("Age<-",function(Object){standardGeneric("Age<-")})#
#
setReplaceMethod("Age","Leprechaun",function(Object){#
	Object@age<-as.integer(Object@age+1)#
	return(Object)#
})#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:100){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		Surv(pop[[i]])#
		Age(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
pop
rm(ls())
rm(ls)
rm()
ls
pop
pop
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv<-",function(Object){standardGeneric("Surv<-")})#
#
setReplaceMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
	return(Object)#
})#
#
# Simple function, simply adds 1 to the age#
setGeneric("Age<-",function(Object){standardGeneric("Age<-")})#
#
setReplaceMethod("Age","Leprechaun",function(Object){#
	Object@age<-as.integer(Object@age+1)#
	return(Object)#
})#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:100){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		Surv(pop[[i]])#
		Age(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standardGeneric("Surv")})#
#
setReplaceMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
	return(Object)#
})#
#
# Simple function, simply adds 1 to the age#
setGeneric("Age",function(Object){standardGeneric("Age")})#
#
setReplaceMethod("Age","Leprechaun",function(Object){#
	Object@age<-as.integer(Object@age+1)#
	return(Object)#
})#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:100){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		Surv(pop[[i]])#
		Age(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standardGeneric("Surv")})#
#
setReplaceMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
	return(Object)#
})#
#
# Simple function, simply adds 1 to the age#
setGeneric("Age",function(Object){standardGeneric("Age")})#
#
setReplaceMethod("Age","Leprechaun",function(Object){#
	Object@age<-as.integer(Object@age+1)#
	return(Object)#
})#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:100){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		Surv(pop[[i]])#
		Age(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standardGeneric("Surv")})#
#
setReplaceMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
	return(Object)#
})#
#
# Simple function, simply adds 1 to the age#
setGeneric("Age",function(Object){standardGeneric("Age")})#
#
setReplaceMethod("Age","Leprechaun",function(Object){#
	Object@age<-as.integer(Object@age+1)#
	return(Object)#
})#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:100){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		pop[[i]]<-Surv(pop[[i]])#
		pop[[i]]<-Age(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standardGeneric("Surv")})#
#
setReplaceMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
	return(Object)#
})#
#
# Simple function, simply adds 1 to the age#
setGeneric("Age",function(Object){standardGeneric("Age")})#
#
setReplaceMethod("Age","Leprechaun",function(Object){#
	Object@age<-as.integer(Object@age+1)#
	return(Object)#
})#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:100){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		pop[[i]]<-Surv(pop[[i]])#
		pop[[i]]<-Age(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
In this file we will try to come up with some things #####
################################################################
#
#########################
####### Type of program#
## Written in R#
## Object Oriented#
########################
#
########################
# Main object "Leprechaun": an individual of our species of interest, the Irish Leprechaun, small in size, but with great powers. To make it more French for Timothee, we assume that their favourite food is camembert.#
##
# The object contains the following values#
#
# Static [these numbers do not change after initialisation]#
#  V ID (unique identifier number)																	[integer]#
#  V pID (two numbers referring to the parents of the Leprechaun, if none: NA)						[vector of two integers]#
#  V Year of birth (timestep at which the individual was born)										[integer]#
#  - Genome (?) (two vectors of length N coding for both chromosomes of N loci in the genome.)		[two vectors of N integers]#
#
# Dynamic [these numbers do change after initialisation]#
#  V alive (boolean, true/false)																	[boolean]#
#  V age (timesteps since birth)																	[integer]#
#  V size																							[double]#
#
# The object contains the following functions (for now)#
#  - Grow#
#  - Survive#
########################
#
#####################################################
################ GLOBAL VARIABLES AND COUNTERS ######
#####################################################
#
################ Counter for the IDs ################
CID<-as.integer(1) #
################ Counter for the current year #######
YR<-0 #
#
#####################################################
############### Definition of the class #############
#####################################################
#
setClass(#
	Class="Leprechaun",#
	representation=representation(#
		ID = "integer",#
		pID = "integer",#
		age = "integer",#
		Birth = "integer",#
		alive = "logical",#
		size = "numeric",#
		sex = "character"#
	)#
#
)#
#
############### Definition of the basic methods (for printing to the screen and initialisation)#
################################################################################################
setMethod("show","Leprechaun",#
	function(object){#
		cat(object@ID,"\t",object@size,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")#
	}#
)#
#
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#
	if(missing(parent1)){parent1<-NA; weight1<-5+2*runif(1)}else{weight1<-pop[[parent1]]@size}#
	if(missing(parent2)){parent2<-NA; weight2<-5+2*runif(1)}else{weight2<-pop[[parent2]]@size}#
	.Object@age<-as.integer(0)#
	.Object@ID<-CID#
	.Object@pID<-c(as.integer(parent1),as.integer(parent2))#
	.Object@Birth<-as.integer(YR)#
	.Object@alive<-TRUE#
	.Object@size<-0.5*weight1+0.5*weight2#
#
	if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}#
#
	CID<<-as.integer(CID+1)#
	return(.Object)#
})#
#
################### Definition of more biologically relevant methods (e.g. survival)#
#####################################################################################
#
# Implementing the famous bathtub, ages 1 to 20#
bathtub<-function(age){#
	p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))#
	p[p>1]<-1#
	return(p)#
}#
#
# Applying the bathtub in a surival function#
setGeneric("Surv",function(Object){standardGeneric("Surv")})#
#
setMethod("Surv","Leprechaun",function(Object){#
	if(runif(1)>bathtub(Object@age)){#
		Object@alive<-FALSE#
		ALIVE<<-ALIVE[ALIVE!=Object@ID]#
	}#
	return(Object)#
})#
#
# Simple function, simply adds 1 to the age#
setGeneric("Age",function(Object){standardGeneric("Age")})#
#
setMethod("Age","Leprechaun",function(Object){#
	Object@age<-as.integer(Object@age+1)#
	return(Object)#
})#
############### Creating an initial population with 10 individuals#
pop<-c(new("Leprechaun"))#
for(i in 2:100){#
	pop<-c(pop,new("Leprechaun"))#
}#
#
############### List of living individuals [their indices], this will save time later, because dead individuals are not looped over#
ALIVE<-1:length(pop)#
#
############### The start of time#
for(YR in 1:10){#
	cat("\nAt the beginning of year:",YR,"\nThere are:",length(ALIVE),"Leprechauns\n-----------------\n")#
	#### Survival#
	for(i in ALIVE){#
		pop[[i]]<-Surv(pop[[i]])#
		pop[[i]]<-Age(pop[[i]])#
		cat(i,"\t")#
	}#
	#### Growth#
	#### Reproduction#
}
pop
