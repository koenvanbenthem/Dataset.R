HunterQualities<-as.numeric(lapply(pop[ALIVE],Hunting))
HunterQualities<-HunterQualities-2*min(HunterQualities)+mean(HunterQualities)
#HunterQualities<-rep(x=1/length(ALIVE),length(ALIVE))# here completely random. prob can introduce quality for competition
#HunterQualities<- abs(HuntingAlive - mean(HuntingAlive)) # here the most original individuals have a strong advantage in the competition (f-dpd selection)
if(length(HunterQualities)==1){HunterQualities=1}
#podium<-table(factor(sample(as.character(ALIVE),size=camembert,replace=T,prob=HunterQualities),levels=ALIVE))
#camams<-as.numeric(podium[match(ALIVE,names(podium))])
camams<-round(camembert*HunterQualities/sum(HunterQualities),digits = 0)
#pop[ALIVE]<-lapply(1:length(ALIVE), function(x) Food(pop[[ALIVE[x]]],camams[x]))
pop[ALIVE]<-lapply(1:length(ALIVE), function(x) Food(pop[[ALIVE[x]]],camams[x]))
#### Survival
DEAD<-c()
pop[ALIVE]<-lapply(pop[ALIVE],Surv)
ALIVE<-ALIVE[!(ALIVE %in% DEAD)]
if(length(ALIVE)==0){
for(i in DEAD){
cat("\n",YR,"\t",pop[[i]]@ID,"\t",pop[[i]]@size,"\t",pop[[i]]@bvs,"\t",pop[[i]]@hunting,"\t",pop[[i]]@bvh,"\t",pop[[i]]@camemberts,"\t",pop[[i]]@sex,"\t",pop[[i]]@ARS,"\t",pop[[i]]@age,"\t",pop[[i]]@pID[1],"\t",pop[[i]]@pID[2],"\t",0,file=filename,append=TRUE)
}
break
}
#### Age+1 and growth
pop[ALIVE]<-lapply(pop[ALIVE],Age)
pop[ALIVE]<-lapply(pop[ALIVE],Grow)
#### Reproduction  ### Not the easiest part (but necessary if we want to allow the population to grow)
##########
### Part dedicated to retrieving the indices of all living males and of all living females
##########
males<-lapply(pop,Sex)=="M" # Determine which individuals are males -- logicaly all other individuals should be females... However, this includes dead ones... Simply a list of T,T,F,F,T,F,F,....
females<-which(!males) # Get the indices of the non-males (that is females..)
males<-which(males)   # Get the indices of the males
females<-intersect(females,ALIVE) # Retrieve the indices of the living(!) females
males <-intersect(males,ALIVE) # Retrieve the indises of the living males
#cat(females)
##########
# Part dedicated to breeding..
##########
# We take a female based approach: we determine for each females
from<-CID
pop[females]<-lapply(pop[females],FUN = function(x){Num_off*disaster[YR]})
for(i in females){
Noffs<-pop[[i]]@ARS
if(Noffs>0 & length(males>0)){
#Determine the father
fat<-sample(males,1)
pop[females]<-lapply(pop[females],FUN = function(x){Num_off*disaster[YR]})
pop[females]<-lapply(pop[females],FUN = function(x){Num_off*disaster[YR]})
pop[females]<-lapply(pop[females],FUN =Num_off)
pop[females]<-lapply(pop[females],FUN =Num_off)**disaster[YR]
pop[females]<-lapply(pop[females],FUN =Num_off)*disaster[YR]
lapply(pop[females],FUN =Num_off)
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*1000,StudyLength = 40,SexualMaturity=1,fertilitySelection1 = 1)
lambda<-exp(log(MeanRepro)+fertilitySelection1*(Object@size-MeanBirthSize)/10+fertilitySelection2*((Object@size-MeanBirthSize)/10)^2
+camembertSelection*((Object@camemberts)^(1/3)-survivalPenaltyForRepro)/10)
Object<-new("Leprechaun")
lambda<-exp(log(MeanRepro)+fertilitySelection1*(Object@size-MeanBirthSize)/10+fertilitySelection2*((Object@size-MeanBirthSize)/10)^2
+camembertSelection*((Object@camemberts)^(1/3)-survivalPenaltyForRepro)/10)
repro<-rpois(n=1,lambda=lambda)+1
repro
logitV<-Object@age-SexualMaturity
p<-1/(1+exp(-logitV))
Object@ARS<-as.integer(repro)*rbinom(1,size = 1,prob = p)*disaster[YR]
as.integer(repro)*rbinom(1,size = 1,prob = p)
disaster[YR]
Object@ARS<-as.integer(repro)*rbinom(1,size = 1,prob = p)
Object@ARS<-as.integer(repro)*rbinom(1,size = 1,prob = p)*disaster[YR]
Object@ARS<-as.integer(repro)*rbinom(1,size = 1,prob = p)*as.integer(disaster[YR])
disaster<-as.integer(rep(c(1,0),times = 1+StudyLength/2))
Object@ARS<-as.integer(repro)*rbinom(1,size = 1,prob = p)*as.integer(disaster[YR])
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*1000,StudyLength = 40,SexualMaturity=1,fertilitySelection1 = 1)
setwd(dir="/GitHub/Dataset.R")
popfile<-read.table(file="data/simple/pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_1000.csv",header=T)
popfile<-read.table(file="data/simple/Disasters.csv",header=T)
plot(popfile$z,x=popfile$age)
popsize<-table(popfile$t)
plot(popsize)
tapply(X = popfile$ARS,INDEX = popfile$t)
tapply(X = popfile$ARS,INDEX = popfile$t,FUN = mean)
popfile<-read.table(file="data/simple/Disasters.csv",header=T)
tapply(X = popfile$ARS,INDEX = popfile$t,FUN = mean)
disaster<-as.integer(rep(c(1,0),times = 1+StudyLength/2))
disaster
as.integer(repro)*rbinom(1,size = 1,prob = p)*disaster[YR]
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*1000,StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1)
popfile<-read.table(file="data/simple/dis.csv",header=T)
tapply(X = popfile$ARS,INDEX = popfile$t,FUN = mean)
View(popfile)
plot(popfile$ARS,x=popfile$t)
hist(popfile$ARS,x=popfile$t)
popfile$ARS
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*1000,StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1)
popfile<-read.table(file="data/simple/dis.csv",header=T)
tapply(X = popfile$ARS,INDEX = popfile$t,FUN = mean)
hist(popfile$ARS,x=popfile$t)
plot(popfile$ARS,x=popfile$t)
popsize<-table(popfile$t)
plot(popsize)
tapply(X = popfile$ARS[which(popfile$phi==1),],INDEX = popfile$t[which(popfile$phi==1),],FUN = mean)
tapply(X = popfile$ARS[which(popfile$phi==1)],INDEX = popfile$t[which(popfile$phi==1)],FUN = mean)
plot(popfile$ARS,x=popfile$t)
plot(popfile$ARS[which(popfile$phi==1)],x=popfile$t[which(popfile$phi==1)])
curve(exp(log(10)+0.1*(20-10)/10-x/10),0,10)
curve(exp(log(10)+0.1*(20-10)/10-x/10),0,20)
curve(exp(log(10)+0.1*(30-10)/10-x/10),0,20)
curve(exp(log(10)+0.1*(11-10)/10-x/10),0,20)
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*1000,StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1,survivalPenaltyForRepro =20 )
popfile<-read.table(file="data/simple/penalty.csv",header=T)
popsize<-table(popfile$t)
plot(popsize)
tapply(X = popfile$ARS[which(popfile$phi==1)],INDEX = popfile$t[which(popfile$phi==1)],FUN = mean)
plot(popfile$ARS[which(popfile$phi==1)],x=popfile$t[which(popfile$phi==1)])
cov(popfile$ARS,popfile$phi)
popfile<-read.table(file="data/simple/pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_1000.csv",header=T)
popfile<-read.table(file="data/simple/dis.csv",header=T)
cov(popfile$ARS,popfile$phi)
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
LeprechaunSimul(InitialPopSize = 10,MeanRepro = 4,MeanCamembert = 100*1000,StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1,survivalPenaltyForRepro =20 )
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
LeprechaunSimul(InitialPopSize = 10,MeanRepro = 4,MeanCamembert = 100*1000,StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1,survivalPenaltyForRepro =20 )
pop<-c(new("Leprechaun"))
#folder<-"Simple"
converter<-paste(DIR,"/conv.csv",sep="")
#dir.create(file.path("Data", folder))
cat("filename\tSS1\tSS2\tFS1\tFS2\tCAMSEL\tSDCAM",file=converter,append=FALSE)
#
# SurvivalSelection1<-0.1 #linear coefficient on a logit scale for Survival ~ ... + size +size^2
# SurvivalSelection2<-(0.0) #quadratic coefficient on a logit scale for Survival ~ ... + size + size^2; negative value=balancing selection
# fertilitySelection1<-0.1 #linear coefficient on a log scale for reproduction ~ ... + size + size^2
# fertilitySelection2<-(0.0) #quadratic coefficient on a log scale for reproduction ~ ... + size + size^2; negative value=balancing selection
# camembertSelection<-0.1 #increases the number of offspring, multiplied by Number Of Camemberts at the power 1/3 (because its a volume, uhuh)
# survivalPenaltyForRepro<-0
# ############### Environmental parameters ##########
# MeanCamembert<-5000
# SDCamembert<-1000
# lowBoundGrowth<-0.99 # minimal growth rate
# highBoundGrowth<-1.5 # maximal growth rate
# PlasticityBirthSize<-1
# PlasticityHunting<-0
# MaternalEffect<-0.1
# SexualMaturity<-4 #the 50% reproductive size
# MeanBirthSize<-10
# MeanRepro<-10
filename<-paste(DIR,"/pop_SS1_",SurvivalSelection1*10,"_SS2_",SurvivalSelection2*100,"_FS1_",fertilitySelection1*10,
"_FS2_",fertilitySelection2*100,"_CAMSEL_",camembertSelection*10,"_SDCAM_",SDCamembert,".csv",sep="")
cat("\n",filename,"\t",SurvivalSelection1,"\t",SurvivalSelection2,"\t",fertilitySelection1,"\t",fertilitySelection2,"\t",camembertSelection,"\t",SDCamembert,file=converter,append=TRUE)
################ Counter for the IDs ###############%
CID<-as.integer(1)
################ Counter for the current year ######%
YR<-0
################ Base population parameters ########
############### Genetic determinisms  ##############%
dominance<-1 # for additive effects only, must be 0
overdominance<-0 # non-null values generate overdominance
nbLoci<-10 #number of loci controling the trait phenotype
nbAlleles<-10 #number of existing alleles per loci
SDZ<-1#standard deviation of locus effect on size
SDH<-1#standard deviation of locus effect on hunting
FunctionGvalues<-function(nbLoci=10,nbAlleles=10,dominance=0.5,overdominance=0,SD=1)
{
gvalues<-array(data=NA,dim=c(nbAlleles,nbAlleles,nbLoci),dimnames=list(paste("A",1: nbAlleles,sep=""),paste("A",1: nbAlleles,sep=""),paste("L",1:nbLoci,sep=""))) # Initialising a matrix that will contain the genotypic effects on the/a trait
for(L in 1:nbLoci)
{
# Setting the effects for the homozygotes [all loci]
effect<-abs(rnorm(n=1,mean=0,sd=SD))# alter the locus importance in a realistic way (many small-effect loci, few major loci)
diag(gvalues[,,L])<-2*rnorm(n=dim(gvalues)[1],mean=0,sd=effect)
# Setting the effects for the heterozygotes
for(A in 1:(nbAlleles-1))# loop for off-diagonal = heterozygotes (additive and dominance effects)
{
for (D in (A+1):nbAlleles)
{
d<-dominance*runif(n=1,min=-0.5-overdominance,max=0.5+overdominance)
gvalues[A,D,L]<-(0.5-d)*gvalues[A,A,L]+(0.5+d)*gvalues[D,D,L] # mean of additive effects + dominance, over diagonal
gvalues[D,A,L]<-(0.5-d)*gvalues[A,A,L]+(0.5+d)*gvalues[D,D,L] # the same below diagonal
}
}
}
return(gvalues)
}
############### Genetic determinism Z
gvaluesZ<-FunctionGvalues(nbLoci = nbLoci,nbAlleles = nbAlleles,dominance = dominance,overdominance = overdominance,SD=SDZ)
############### Genetic determinism H
gvaluesH<-FunctionGvalues(nbLoci = nbLoci,nbAlleles = nbAlleles,dominance = dominance,overdominance = overdominance,SD=SDH)
#######vector of expected sizes for all ages#####
age<-1:20
highBoundGrowthAge<-(highBoundGrowth+age-1)/age
Growth<-c(1,sapply(X = highBoundGrowthAge,FUN = function(x){mean(c(lowBoundGrowth,x))}))#with a 1 for the non-growth of the first year
############### Creating an initial population with 100 individuals#######
pop<-c(new("Leprechaun"))
#folder<-"Simple"
converter<-paste(DIR,"/conv.csv",sep="")
#dir.create(file.path("Data", folder))
cat("filename\tSS1\tSS2\tFS1\tFS2\tCAMSEL\tSDCAM",file=converter,append=FALSE)
#
# SurvivalSelection1<-0.1 #linear coefficient on a logit scale for Survival ~ ... + size +size^2
# SurvivalSelection2<-(0.0) #quadratic coefficient on a logit scale for Survival ~ ... + size + size^2; negative value=balancing selection
# fertilitySelection1<-0.1 #linear coefficient on a log scale for reproduction ~ ... + size + size^2
# fertilitySelection2<-(0.0) #quadratic coefficient on a log scale for reproduction ~ ... + size + size^2; negative value=balancing selection
# camembertSelection<-0.1 #increases the number of offspring, multiplied by Number Of Camemberts at the power 1/3 (because its a volume, uhuh)
# survivalPenaltyForRepro<-0
# ############### Environmental parameters ##########
# MeanCamembert<-5000
# SDCamembert<-1000
# lowBoundGrowth<-0.99 # minimal growth rate
# highBoundGrowth<-1.5 # maximal growth rate
# PlasticityBirthSize<-1
# PlasticityHunting<-0
# MaternalEffect<-0.1
# SexualMaturity<-4 #the 50% reproductive size
# MeanBirthSize<-10
# MeanRepro<-10
filename<-paste(DIR,"/pop_SS1_",SurvivalSelection1*10,"_SS2_",SurvivalSelection2*100,"_FS1_",fertilitySelection1*10,
"_FS2_",fertilitySelection2*100,"_CAMSEL_",camembertSelection*10,"_SDCAM_",SDCamembert,".csv",sep="")
cat("\n",filename,"\t",SurvivalSelection1,"\t",SurvivalSelection2,"\t",fertilitySelection1,"\t",fertilitySelection2,"\t",camembertSelection,"\t",SDCamembert,file=converter,append=TRUE)
################ Counter for the IDs ###############%
CID<-as.integer(1)
################ Counter for the current year ######%
YR<-0
################ Base population parameters ########
############### Genetic determinisms  ##############%
dominance<-1 # for additive effects only, must be 0
overdominance<-0 # non-null values generate overdominance
nbLoci<-10 #number of loci controling the trait phenotype
nbAlleles<-10 #number of existing alleles per loci
SDZ<-1#standard deviation of locus effect on size
SDH<-1#standard deviation of locus effect on hunting
FunctionGvalues<-function(nbLoci=10,nbAlleles=10,dominance=0.5,overdominance=0,SD=1)
{
gvalues<-array(data=NA,dim=c(nbAlleles,nbAlleles,nbLoci),dimnames=list(paste("A",1: nbAlleles,sep=""),paste("A",1: nbAlleles,sep=""),paste("L",1:nbLoci,sep=""))) # Initialising a matrix that will contain the genotypic effects on the/a trait
for(L in 1:nbLoci)
{
# Setting the effects for the homozygotes [all loci]
effect<-abs(rnorm(n=1,mean=0,sd=SD))# alter the locus importance in a realistic way (many small-effect loci, few major loci)
diag(gvalues[,,L])<-2*rnorm(n=dim(gvalues)[1],mean=0,sd=effect)
# Setting the effects for the heterozygotes
for(A in 1:(nbAlleles-1))# loop for off-diagonal = heterozygotes (additive and dominance effects)
{
for (D in (A+1):nbAlleles)
{
d<-dominance*runif(n=1,min=-0.5-overdominance,max=0.5+overdominance)
gvalues[A,D,L]<-(0.5-d)*gvalues[A,A,L]+(0.5+d)*gvalues[D,D,L] # mean of additive effects + dominance, over diagonal
gvalues[D,A,L]<-(0.5-d)*gvalues[A,A,L]+(0.5+d)*gvalues[D,D,L] # the same below diagonal
}
}
}
return(gvalues)
}
############### Genetic determinism Z
gvaluesZ<-FunctionGvalues(nbLoci = nbLoci,nbAlleles = nbAlleles,dominance = dominance,overdominance = overdominance,SD=SDZ)
############### Genetic determinism H
gvaluesH<-FunctionGvalues(nbLoci = nbLoci,nbAlleles = nbAlleles,dominance = dominance,overdominance = overdominance,SD=SDH)
#######vector of expected sizes for all ages#####
age<-1:20
highBoundGrowthAge<-(highBoundGrowth+age-1)/age
Growth<-c(1,sapply(X = highBoundGrowthAge,FUN = function(x){mean(c(lowBoundGrowth,x))}))#with a 1 for the non-growth of the first year
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
LeprechaunSimul(InitialPopSize = 10,MeanRepro = 4,MeanCamembert = 100*1000,StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1,survivalPenaltyForRepro =20 )
LeprechaunSimul
LeprechaunSimul()
setGeneric("Num_off",function(Object){standardGeneric("Num_off")})
setMethod("Num_off","Leprechaun",function(Object){
lambda<-exp(log(MeanRepro)+fertilitySelection1*(Object@size-MeanBirthSize)/10+fertilitySelection2*((Object@size-MeanBirthSize)/10)^2
+camembertSelection*((Object@camemberts)^(1/3))/10)
repro<-rpois(n=1,lambda=lambda)+1
logitV<-Object@age-SexualMaturity
p<-1/(1+exp(-logitV))
Object@ARS<-as.integer(repro)*rbinom(1,size = 1,prob = p)*disaster[YR]
return(Object)
})
setMethod("show","Leprechaun",
function(object){
cat(object@ID,"\t",object@size,"\t",object@camemberts,"\t",object@age,"\t",object@sex,"\t(",object@pID[1],",",object@pID[2],")\t",object@Birth,"\t",object@alive,"\n",sep="")
}
)
setMethod("initialize","Leprechaun",function(.Object,parent1,parent2){#parent1 is the mother
.Object@DNAZ<-matrix(NA,nrow=2,ncol=nbLoci)
.Object@DNAH<-matrix(NA,nrow=2,ncol=nbLoci)
if(missing(parent1)){
parent1<-NA
.Object@DNAZ[1,]<-floor(runif(nbLoci,min=1,max=nbAlleles+1))
.Object@DNAH[1,]<-floor(runif(nbLoci,min=1,max=nbAlleles+1))
}else{
#weight1<-pop[[parent1]]@size
.Object@DNAZ[1,]<-pop[[parent1]]@DNAZ[cbind(floor(runif(n=nbLoci,min=1,max=3)),1:nbLoci)]
.Object@DNAH[1,]<-pop[[parent1]]@DNAH[cbind(floor(runif(n=nbLoci,min=1,max=3)),1:nbLoci)]
}
if(missing(parent2)){
parent2<-NA
.Object@DNAZ[2,]<-floor(runif(nbLoci,min=1,max=nbAlleles+1))
.Object@DNAH[2,]<-floor(runif(nbLoci,min=1,max=nbAlleles+1))
}else{
.Object@DNAZ[2,]<-pop[[parent2]]@DNAZ[cbind(floor(runif(n=nbLoci,min=1,max=3)),1:nbLoci)]
.Object@DNAH[2,]<-pop[[parent2]]@DNAH[cbind(floor(runif(n=nbLoci,min=1,max=3)),1:nbLoci)]
}
.Object@age<-as.integer(0)
.Object@ID<-CID
.Object@pID<-c(as.integer(parent1),as.integer(parent2))
.Object@Birth<-as.integer(YR)
.Object@alive<-TRUE
BreedingValueSize<-0
for (Locus in 1:nbLoci)#take the mean of genetic values
{
BreedingValueSize<-BreedingValueSize+(gvaluesZ[ .Object@DNAZ[1,Locus], .Object@DNAZ[2,Locus], Locus]/nbLoci)
}
.Object@bvs<-BreedingValueSize
size<-MeanBirthSize+BreedingValueSize
if(!is.na(parent1)){
size<-size+MaternalEffect*pop[[parent1]]@size
}
.Object@size<-abs(rnorm(n=1,mean=size,sd=PlasticityBirthSize)) # sd plasticity birth size
BreedingValueHunting<-0
for (Locus in 1:nbLoci)#take the mean of genetic values
{
BreedingValueHunting<-BreedingValueHunting+(gvaluesH[ .Object@DNAH[1,Locus], .Object@DNAH[2,Locus], Locus]/nbLoci)
}
.Object@bvh<-BreedingValueHunting
.Object@hunting<-rnorm(n=1,mean=.Object@bvh,sd=PlasticityHunting) # sd plasticity hunting quality
.Object@camemberts<-as.integer(0)
.Object@ARS<-as.integer(0)#annual reproductive success
if(runif(1)>0.5){.Object@sex<-'F'}else{.Object@sex<-'M'}
CID<<-as.integer(CID+1)
return(.Object)
})
new("Leprechaun")
SurvivalSelection1<-0.1 #linear coefficient on a logit scale for Survival ~ ... + size +size^2
SurvivalSelection2<-(0.0) #quadratic coefficient on a logit scale for Survival ~ ... + size + size^2; negative value=balancing selection
fertilitySelection1<-0.1 #linear coefficient on a log scale for reproduction ~ ... + size + size^2
fertilitySelection2<-(0.0) #quadratic coefficient on a log scale for reproduction ~ ... + size + size^2; negative value=balancing selection
camembertSelection<-0.1 #increases the number of offspring, multiplied by Number Of Camemberts at the power 1/3 (because its a volume, uhuh)
survivalPenaltyForRepro<-0
############### Environmental parameters ##########
MeanCamembert<-5000
SDCamembert<-1000
lowBoundGrowth<-0.99 # minimal growth rate
highBoundGrowth<-1.5 # maximal growth rate
PlasticityBirthSize<-1
PlasticityHunting<-0
MaternalEffect<-0.1
SexualMaturity<-4 #the 50% reproductive size
MeanBirthSize<-10
MeanRepro<-10
############## Genetic determinisms  ##############%
dominance<-1 # for additive effects only, must be 0
overdominance<-0 # non-null values generate overdominance
nbLoci<-10 #number of loci controling the trait phenotype
nbAlleles<-10 #number of existing alleles per loci
SDZ<-1#standard deviation of locus effect on size
SDH<-1#standard deviation of locus effect on hunting
pop<-c(new("Leprechaun"))
for(i in 2:InitialPopSize){
pop<-c(pop,new("Leprechaun"))
}
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
LeprechaunSimul(InitialPopSize = 10,MeanRepro = 4,MeanCamembert = 100*1000,StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1,survivalPenaltyForRepro =20 )
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
LeprechaunSimul(InitialPopSize = 10,MeanRepro = 4,MeanCamembert = 100*1000,StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1,survivalPenaltyForRepro =20 )
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
LeprechaunSimul(InitialPopSize = 10,MeanRepro = 4,MeanCamembert = 100*1000,StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1,survivalPenaltyForRepro =20 )
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
LeprechaunSimul(InitialPopSize = 10,MeanRepro = 4,MeanCamembert = 100*1000,StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1,survivalPenaltyForRepro =20 )
gvaluesH<-FunctionGvalues(nbLoci = nbLoci,nbAlleles = nbAlleles,dominance = dominance,overdominance = overdominance,SD=0)
FunctionGvalues<-function(nbLoci=10,nbAlleles=10,dominance=0.5,overdominance=0,SD=1)
{
gvalues<-array(data=NA,dim=c(nbAlleles,nbAlleles,nbLoci),dimnames=list(paste("A",1: nbAlleles,sep=""),paste("A",1: nbAlleles,sep=""),paste("L",1:nbLoci,sep=""))) # Initialising a matrix that will contain the genotypic effects on the/a trait
for(L in 1:nbLoci)
{
# Setting the effects for the homozygotes [all loci]
effect<-abs(rnorm(n=1,mean=0,sd=SD))# alter the locus importance in a realistic way (many small-effect loci, few major loci)
diag(gvalues[,,L])<-2*rnorm(n=dim(gvalues)[1],mean=0,sd=effect)
# Setting the effects for the heterozygotes
for(A in 1:(nbAlleles-1))# loop for off-diagonal = heterozygotes (additive and dominance effects)
{
for (D in (A+1):nbAlleles)
{
d<-dominance*runif(n=1,min=-0.5-overdominance,max=0.5+overdominance)
gvalues[A,D,L]<-(0.5-d)*gvalues[A,A,L]+(0.5+d)*gvalues[D,D,L] # mean of additive effects + dominance, over diagonal
gvalues[D,A,L]<-(0.5-d)*gvalues[A,A,L]+(0.5+d)*gvalues[D,D,L] # the same below diagonal
}
}
}
return(gvalues)
}
gvaluesH<-FunctionGvalues(nbLoci = nbLoci,nbAlleles = nbAlleles,dominance = dominance,overdominance = overdominance,SD=0)
FunctionGvalues(SD = 9)
FunctionGvalues(SD = 0)
pop<-c(new("Leprechaun"))
for(i in 2:InitialPopSize){
pop<-c(pop,new("Leprechaun"))
}
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*500,StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1,survivalPenaltyForRepro =20 )
rh<-runif(100,0,1)
rh/sum(rh)
hist(rh/sum(rh))
popfile<-read.table(file="pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_1000.csv",header=T)
setwd(dir="/GitHub/Dataset.R")
getwd()
popfile<-read.table(file="data/simple/pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_1000.csv",header=T)
popsize<-table(popfile$t)
plot(popsize)
curve(-1+exp((x-6)*log(2)/10),0,20)
curve(bathtub,0,20)
curve(exp(x-1)/(1+exp(x-1)),from = 0,to = 20)
p<-0.5
plogit<-log(p/(1-p))
curve(plogit-0.1*(20-15)+x,0,20)
curve(1/(1+exp((plogit-0.1*(20-15)+x,0,20)))
curve(1/(1+exp((plogit-0.1*(20-15)+x),0,20))
p<-exp(Philogit)/(1+exp(Philogit))
curve(1/(1+exp((plogit-0.1*(20-15)+x),0,20)))
curve(1/(1+exp((plogit-0.1*(20-15)+x)),0,20))
curve(1/(1+exp((plogit-0.1*(20-15)+x))),0,20)
curve(1/(1+exp((plogit-0.1*(20-15)+x/2))),0,20)
curve(1/(1+exp((plogit-0.1*(20-15)+x*0.2))),0,20)
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*500,StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1,survivalPenaltyForRepro =20 )
setwd(dir="/GitHub/Dataset.R/")
popfile<-read.table(file="data/simple/pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_1000.csv",header=T)
popsize<-table(popfile$t)
plot(popsize)
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*200,
StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1,  survivalPenaltyForRepro =0.2 )
popfile<-read.table(file="data/simple/pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_1000.csv",header=T)
popsize<-table(popfile$t)
plot(popsize)
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*200,
StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1,  survivalPenaltyForRepro =2 )
popfile<-read.table(file="data/simple/pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_1000.csv",header=T)
popsize<-table(popfile$t)
plot(popsize)
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*200,
StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1,  survivalPenaltyForRepro =20 )
popfile<-read.table(file="data/simple/pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_1000.csv",header=T)
popsize<-table(popfile$t)
plot(popsize)
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*200,
StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1,  survivalPenaltyForRepro =200 )
popfile<-read.table(file="data/simple/pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_1000.csv",header=T)
popsize<-table(popfile$t)
plot(popsize)
curve(1/(1+exp((plogit-0.1*(20-15)+x*0.2))),0,20)
curve(0.2*exp(-x/4),0,20)
curve(exp(x-1)/(1+exp(x-1)),from = 0,to = 20)
curve(exp(-(plogit-0.1*(20-15)+x*0.2)))/(1+exp(-(plogit-0.1*(20-15)+x*0.2)))),from = 0,to = 20)
curve(exp(-(plogit-0.1*(20-15)+x*0.2))/(1+exp(-(plogit-0.1*(20-15)+x*0.2))),from = 0,to = 20)
curve(1/(1+exp((plogit-0.1*(20-15)+x*0.2))),0,20)
max(popfile$ARS)
curve(1/(1+exp((plogit-0.1*(20-15)+x*2))),0,20)
curve(1/(1+exp((plogit-0.1*(20-15)+x*1))),0,20)
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*100,
StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1,  survivalPenaltyForRepro =1 )
popfile<-read.table(file="data/simple/pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_1000.csv",header=T)
popsize<-table(popfile$t)
plot(popsize)
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*50,
StudyLength = 10,SexualMaturity=1,fertilitySelection1 = 1,  survivalPenaltyForRepro =1 )
popfile<-read.table(file="data/simple/pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_1000.csv",header=T)
popsize<-table(popfile$t)
plot(popsize)
popfile$ARSt<-NA
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*100,
StudyLength = 50,SexualMaturity=1,fertilitySelection1 = 1,  survivalPenaltyForRepro =1 )
popfile<-read.table(file="data/simple/pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_1000.csv",header=T)
popsize<-table(popfile$t)
plot(popsize)
tapply(X = popfile$ARS[which(popfile$phi==1)],INDEX = popfile$t[which(popfile$phi==1)],FUN = mean)
plot(popfile$ARS[which(popfile$phi==1)],x=popfile$t[which(popfile$phi==1)])
100*100
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*100,SDCamembert = 100*100,
StudyLength = 50,SexualMaturity=1,fertilitySelection1 = 1,  survivalPenaltyForRepro =1 )
popfile<-read.table(file="data/simple/pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_1000.csv",header=T)
plot(popfile$z,x=popfile$age)
popsize<-table(popfile$t)
plot(popsize)
popfile<-read.table(file="data/simple/pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_10000.csv",header=T)
popsize<-table(popfile$t)
plot(popsize)
plot(density(rnorm(n = 1000,mean = 10000,sd = 5000)))
plot(density(rnorm(n = 1000,mean = 10000,sd = 3333)))
plot(density(rnorm(n = 1000,mean = 10000,sd = 2000)))
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*100,SDCamembert = 100*100/5,
StudyLength = 50,SexualMaturity=1,fertilitySelection1 = 1,  survivalPenaltyForRepro =1 )
popfile<-read.table(file="data/simple/pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_10000.csv",header=T)
popsize<-table(popfile$t)
plot(popsize)
popfile<-read.table(file="data/simple/pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_2000.csv",header=T)
popsize<-table(popfile$t)
plot(popsize)
plot(popfile$z,x=popfile$T)
plot(popfile$z,x=popfile$t)
plot(popfile$bvs,x=popfile$t)
mm0<-lmer(z~1+age+t+s+(1|ID),data=popfile)
library(lme4)
mm0<-lmer(z~1+age+t+s+(1|ID),data=popfile)
summary(mm0)
mm0<-lmer(bvs~1+age+t+s+(1|ID),data=popfile)
summary(mm0)
lm(bvs~t,data=popfile)
summary(lm(bvs~t,data=popfile))
summary(lm(bvs~t+s,data=popfile))
summary(lm(bvs~t+s+age,data=popfile))
mm0<-lmer(bvs~1+t+s+(1|ID),data=popfile)
summary(lm(bvs~t+s+age,data=popfile))
LeprechaunSimul(InitialPopSize = 100,MeanRepro = 4,MeanCamembert = 100*100,SDCamembert = 100*100/5,
StudyLength = 50,SexualMaturity=1,fertilitySelection1 = 1,  survivalPenaltyForRepro =1 )
popfile<-read.table(file="data/simple/pop_SS1_1_SS2_0_FS1_10_FS2_0_CAMSEL_1_SDCAM_2000.csv",header=T)
plot(popfile$z,x=popfile$t)
popsize<-table(popfile$t)
plot(popsize)
plot(popfile$bvs,x=popfile$t)
summary(lm(bvs~t,data=popfile))
