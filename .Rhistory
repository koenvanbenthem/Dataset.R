sizedeviation<-size-(MeanBirthSize*meanGrowth^age)
p<-bathtub(age)
if(p<1)#because size does not prevent animals of maximal age to die out
{
plogit<-log(p/(1-p))
Philogit<-plogit-SurvivalSelection1*sizedeviation-SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
if(camemberts<100)
{
p<-1-(1-p)*(camemberts/100)
}
}
return(1-p)
}
plot(curve(sizeSurvival(x,15,100),0,20))
plot(curve(bathtub,0,20)))
plot(curve(bathtub,0,20))
# Implementing the famous bathtub, ages 1 to 20
bathtub<-function(age){
p<-0.1*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
sizeSurvival<-function(age,size,camemberts){
sizedeviation<-size-(MeanBirthSize*meanGrowth^age)
p<-bathtub(age)
if(p<1)#because size does not prevent animals of maximal age to die out
{
plogit<-log(p/(1-p))
Philogit<-plogit-SurvivalSelection1*sizedeviation-SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
if(camemberts<100)
{
p<-1-(1-p)*(camemberts/100)
}
}
return(1-p)
}
plot(curve(sizeSurvival(x,15,100),0,20))
# Implementing the famous bathtub, ages 1 to 20
bathtub<-function(age){
p<-0.1*exp(-age/4)+(-1+exp(age*log(5)/20))
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
bathtub<-function(age){
p<-0.1*exp(-age/4)+(-1+exp(age*log(1)/20))
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
Implementing the famous bathtub, ages 1 to 20
bathtub<-function(age){
p<-0.1*exp(-age/4)+2*(-1+exp(age*log(2)/20))
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
#
bathtub<-function(age){
p<-0.2*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
bathtub<-function(age){
p<-0.2*exp(-age/8)+(-1+exp(age*log(2)/20))
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
# Incorporate the effect of size to the survival function
bathtub<-function(age){
p<-0.2*exp(-age/1)+(-1+exp(age*log(2)/20))
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
Implementing the famous bathtub, ages 1 to 20
bathtub<-function(age){
p<-0.2*exp(-age/0.5)+(-1+exp(age*log(2)/20))
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
#
# Implementing the famous bathtub, ages 1 to 20
bathtub<-function(age){
p<-0.2*exp(-age/0.5)+(-1+exp(age*log(5)/20))
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
# Implementing the famous bathtub, ages 1 to 20
bathtub<-function(age){
p<-0.2*exp(-age/0.5)+(-2+exp(age*log(2)/20))
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
bathtub<-function(age){
p<-0.2*exp(-age/4)+(-2+exp(age*log(2)/20))
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
bathtub<-function(age){
p<-0.2*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
enting the famous bathtub, ages 1 to 20
bathtub<-function(age){
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
# Incorp
# Incorporate the effect of size to the survival function
sizeSurvival<-function(age,size,camemberts){
sizedeviation<-size-(MeanBirthSize*meanGrowth^age)
p<-bathtub(age)
if(p<1)#because size does not prevent animals of maximal age to die out
{
plogit<-log(p/(1-p))
Philogit<-0.1+plogit-SurvivalSelection1*sizedeviation-SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
if(camemberts<100)
{
p<-1-(1-p)*(camemberts/100)
}
}
return(1-p)
}
plot(curve(sizeSurvival(x,15,100),0,20))
# Incorporate the effect of size to the survival function
sizeSurvival<-function(age,size,camemberts){
sizedeviation<-size-(MeanBirthSize*meanGrowth^age)
p<-bathtub(age)
if(p<1)#because size does not prevent animals of maximal age to die out
{
plogit<-log(p/(1-p))
Philogit<-5+plogit-SurvivalSelection1*sizedeviation-SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
if(camemberts<100)
{
p<-1-(1-p)*(camemberts/100)
}
}
return(1-p)
}
plot(curve(sizeSurvival(x,15,100),0,20))
# Incorporate the effect of size to the survival function
sizeSurvival<-function(age,size,camemberts){
sizedeviation<-size-(MeanBirthSize*meanGrowth^age)
p<-bathtub(age)
if(p<1)#because size does not prevent animals of maximal age to die out
{
plogit<-log(p/(1-p))
Philogit<-plogit-5-SurvivalSelection1*sizedeviation-SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
if(camemberts<100)
{
p<-1-(1-p)*(camemberts/100)
}
}
return(1-p)
}
plot(curve(sizeSurvival(x,15,100),0,20))
of size to the survival function
sizeSurvival<-function(age,size,camemberts){
sizedeviation<-size-(MeanBirthSize*meanGrowth^age)
p<-bathtub(age)
if(p<1)#because size does not prevent animals of maximal age to die out
{
plogit<-log(p/(1-p))
Philogit<-plogit-1-SurvivalSelection1*sizedeviation-SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
if(camemberts<100)
{
p<-1-(1-p)*(camemberts/100)
}
}
return(1-p)
}
plot(curve(sizeSurvival(x,15,100),0,20))
plot(curve(bathtub,0,20))
plot(1-curve(bathtub,0,20))
plot(curve(1-bathtub,0,20))
plot(curve(bathtub,0,20))
# Implementing the famous bathtub, ages 1 to 20
bathtub<-function(age){
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p<-p+0.2
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
bathtub<-function(age){
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p<-p-0.2
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
# Incorporate the effect of size to the survival function
sizeSurvival<-function(age,size,camemberts){
sizedeviation<-size-(MeanBirthSize*meanGrowth^age)
p<-bathtub(age)
if(p<1)#because size does not prevent animals of maximal age to die out
{
plogit<-log(p/(1-p))
Philogit<-plogit-1-SurvivalSelection1*sizedeviation-SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
if(camemberts<100)
{
p<-1-(1-p)*(camemberts/100)
}
}
return(1-p)
}
plot(curve(sizeSurvival(x,15,100),0,20))
# Incorporate the effect of size to the survival function
sizeSurvival<-function(age,size,camemberts){
sizedeviation<-size-(MeanBirthSize*meanGrowth^age)
p<-bathtub(age)
if(p<1)#because size does not prevent animals of maximal age to die out
{
plogit<-log(p/(1-p))
Philogit<-plogit-SurvivalSelection1*sizedeviation-SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
if(camemberts<100)
{
p<-1-(1-p)*(camemberts/100)
}
}
return(1-p)
}
plot(curve(sizeSurvival(x,15,100),0,20))
plot(curve(bathtub,0,20))
bathtub<-function(age){
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p<-p
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
bathtub<-function(age){
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p<-p-0.2
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
bathtub<-function(age){
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p<-p-0.0
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
bathtub<-function(age){
p<-0.6*exp(-age/2)+(-1+exp(age*log(2)/20))
p<-p
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
bathtub<-function(age){
p<-0.6*exp(-age/10)+(-1+exp(age*1/10))
p<-p
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
# Implementing the famous bathtub, ages 1 to 20
bathtub<-function(age){
p<-0.6*exp(-age/10)+(-1+exp(age*1/10))
p<-p
#p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
bathtub<-function(age){
p<-0.6*exp(-age/10)+(-1+exp(age*1/20))
p<-p
#p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
bathtub<-function(age){
p<-0.6*exp(-age/10)*(-1+exp(age*1/20))
p<-p
#p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
bathtub<-function(age){
p<-0.5*exp(-age/4)+(-1+exp(age*1/20))
p<-p
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
bathtub<-function(age){
p<-0.5*exp(-age/4)+(-1+exp(age*log(2/20))
p<-p
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
bathtub<-function(age){
p<-0.5*exp(-age/4)+(-1+exp(age*log(2)/20))
p<-p
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
plot(curve(0.6*exp(-x/4),0,20))
plot(curve(-1+exp(x*log(2)/20),0,20))
par(mfrow(1,2))
par(mfrow=c(1,2))
plot(curve(0.6*exp(-x/4),0,20))
plot(curve(-1+exp(x*log(2)/20),0,20))
plot(curve(0.6*exp(-x/4),0,20))
curve(-1+exp(x*log(2)/20),0,20)
par(mfrow=c(2,1))
curve(0.6*exp(-x/4),0,20)
curve(0.6*exp(-x/4),0,20)
curve(-1+exp(x*log(2)/20),0,20)
curve(-1+exp(x*log(2)/10-5),0,20)
curve(-1+exp(x*log(2)/10),0,20)
curve(-1+exp(x*log(2)/20),0,20)
curve(-1+exp(x*log(2)/10)-5,0,20)
curve(-1+exp(x*log(2)/10),0,20)
curve(-1+exp(x*log(2)/10)-2,0,20)
curve(0.6*exp(-x/4),0,20)
curve(-1+exp(x*log(2)/10)-2,0,20)
curve(-1+exp((x-5)*log(2)/10),0,20)
curve(0.6*exp(-x/4),0,20)
curve(0.2*exp(-x/4),0,20)
curve(-1+exp((x-5)*log(2)/10),0,20)
bathtub<-function(age){
p<-0.2*exp(-age/4)+(-1+exp((age-5)*log(2)/20))
p<-p
p[p>1]<-1
return(p)
}
plot(curve(bathtub,0,20))
curve(bathtub,0,20)
curve(0.2*exp(-x/4),0,20)
curve(-1+exp((x-5)*log(2)/10),0,20)
curve(-1+exp((x-10)*log(2)/10),0,20)
curve(0.2*exp(-x/4),0,20)
curve(-1+exp((x-4)*log(2)/10),0,20)
curve(bathtub,0,20)
log(2-0.2*exp(-5))
log(2-0.2*exp(-5))/20
bathtub<-function(age){
p<-0.6*exp(-age/4)+(-1+exp((age-5)*log(2)/20))
p<-p
p[p>1]<-1
return(p)
}
curve(bathtub,0,20)
bathtub<-function(age){
p<-0.6*exp(-age/4)+(-1+exp((age-10)*log(2)/20))
p<-p
p[p>1]<-1
return(p)
}
curve(bathtub,0,20)
log(2-0.2*exp(-5))/20
log(2-0.2*exp(-5))/10
eps<-log(2-0.2*exp(-5))/10
eps<-log(2-0.2*exp(-5))/10
alpha<-0.2
beta<-1/4
delta=20
alpha*exp(-beta*20)+exp(20-delta)*eps-1
curve(alpha*exp(-beta*x)+exp(x-delta)*eps-1)
curve(alpha*exp(-beta*x)+exp(x-delta)*eps)
bathtub<-function(age){
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p<-p
p[p>1]<-1
return(p)
}
curve(bathtub,0,20)
bathtub<-function(age){
p<-0.4*exp(-age/4)+(-1+exp(age*log(2)/20))
p<-p
p[p>1]<-1
return(p)
}
curve(bathtub,0,20)
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
p
YR
bathtub<-function(age){
p<-0.4*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
return(p)
}
bathtub(20)
bathtub(2)
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
YR
ALIVE
setwd(dir="/GitHub/Dataset.R/Data/Simple")
setwd(dir="C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\Data\\Simple")
popfile<-read.table(file="pop.csv",header=T)
popfile<-read.table(file="conv.csv",header=T)
popfile<-read.table(file="pop_SS1_1_SS2_0_FS1_1_FS2_0_CAMSEL_1_SDCAM_1000.csv",header=T)
plot(popfile$z,x=popfile$age)
source('~/GitHub/Dataset.R/data.R', echo=TRUE)
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
setwd(dir = "C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R")
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
age<-1:20
highBoundGrowthAge<-(highBoundGrowth+age-1)/age
highBoundGrowthAge
Growth<-runif(1,lowBoundGrowth,highBoundGrowthAge)
Growth
highBoundGrowthAge
Growth<-sapply(X = highBoundGrowthAge,FUN = function(x){runif(1000,lowBoundGrowth,x)}
)
Growth<-sapply(X = highBoundGrowthAge,FUN = function(x){runif(1000,lowBoundGrowth,x)})
Growth
Growth<-sapply(X = highBoundGrowthAge,FUN = function(x){mean(runif(1000,lowBoundGrowth,x))})
Growth
prod(Growth)
prod(Growth[1:10])
prod(Growth[1:11])
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
setwd(dir = "C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R")
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
HunterQualities
camembert*HunterQualities/sum(HunterQualities)
round(camembert*HunterQualities/sum(HunterQualities),digits = 1)
round(camembert*HunterQualities/sum(HunterQualities),digits = 0)
camans<-round(camembert*HunterQualities/sum(HunterQualities),digits = 0)
pop[ALIVE]<-lapply(1:length(ALIVE), function(x) Food(pop[[ALIVE[x]]],camams[x]))
pop[ALIVE]
camans
camams<-round(camembert*HunterQualities/sum(HunterQualities),digits = 0)
#pop[ALIVE]<-lapply(1:length(ALIVE), function(x) Food(pop[[ALIVE[x]]],camams[x]))
pop[ALIVE]<-lapply(1:length(ALIVE), function(x) Food(pop[[ALIVE[x]]],camams[x]))
camams
pop[ALIVE[1]]
pop[ALIVE[1]]@camemberts
pop[[ALIVE[1]]]@camemberts
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
View(popfile)
SurvivalSelection1
low
lowBoundGrowth
highBoundGrowth
MeanBirthSize
0:age
0:age+1
1:(age+1)
age<-0
1:(age+1)
Growth
age<-0
Growth[1:age]
Growth[0]
Growth<-c(1,sapply(X = highBoundGrowthAge,FUN = function(x){mean(runif(1000,lowBoundGrowth,x))}))
Growth
#vector of expected sizes for all ages:
age<-1:20
highBoundGrowthAge<-(highBoundGrowth+age-1)/age
Growth<-c(1,sapply(X = highBoundGrowthAge,FUN = function(x){mean(runif(1000,lowBoundGrowth,x))}))#with a 1 for the non-growth of the first year
Growth<-c(1,sapply(X = highBoundGrowthAge,FUN = function(x){mean(lowBoundGrowth,x)}))
Growth
highBoundGrowthAge
Growth<-c(1,sapply(X = highBoundGrowthAge,FUN = function(x){mean(c(lowBoundGrowth,x))}))
Growth
Growth<-c(1,sapply(X = highBoundGrowthAge,FUN = function(x){mean(runif(1000,lowBoundGrowth,x))}))#with a 1 for the non-growth of the first year
Growth
#vector of expected sizes for all ages:
age<-1:20
highBoundGrowthAge<-(highBoundGrowth+age-1)/age
Growth<-c(1,sapply(X = highBoundGrowthAge,FUN = function(x){mean(c(lowBoundGrowth,x))}))#with a 1 for the non-growth of the first year
highBoundGrowth<-1.2 # maximal growth rate
#vector of expected sizes for all ages:
age<-1:20
highBoundGrowthAge<-(highBoundGrowth+age-1)/age
Growth<-c(1,sapply(X = highBoundGrowthAge,FUN = function(x){mean(c(lowBoundGrowth,x))}))#with a 1 for the non-growth of the first year
Growth
prod(Growth[1:11])
highBoundGrowth<-1.5 # maximal growth rate
#vector of expected sizes for all ages:
age<-1:20
highBoundGrowthAge<-(highBoundGrowth+age-1)/age
Growth<-c(1,sapply(X = highBoundGrowthAge,FUN = function(x){mean(c(lowBoundGrowth,x))}))#with a 1 for the non-growth of the first year
prod(Growth[1:11])
source("C:\\Users\\Timothée\\Documents\\GitHub\\Dataset.R\\data.R")
