diag(gvalues[,,L])<-2*rnorm(n=dim(gvalues)[1],mean=0,sd=effect)
#### Setting the parameters
dominance<-1 # we could set it to zero if we want additive effects only, or make it varying depending on loci
overdominance<-0 # we can make it non nul to allow for overdominance
nbLoci<-10 #number of loci controling the trait phenotype
nbAlleles<-10 #number of existing alleles per loci
gvalues<-array(data=NA,dim=c(nbAlleles,nbAlleles,nbLoci),dimnames=list(paste("A",1: nbAlleles,sep=""),paste("A",1: nbAlleles,sep=""),paste("L",1:nbLoci,sep=""))) # Initialising a matrix that will contain the genotypic effects on the/a trait
for(L in 1:nbLoci)
{
# Setting the effects for the homozygotes [all loci]
effect<-abs(rnorm(n=1,mean=0,sd=1))# alter the locus importance in a realistic way (many small-effect loci, few major loci)
diag(gvalues[,,L])<-2*rnorm(n=dim(gvalues)[1],mean=0,sd=effect)
# Setting the effects for the heterozygotes
for(A in 1:(nbAlleles-1))# loop for off-diagonal = heterozygotes (additive and dominance effects)
{
for (D in (A+1):nbAlleles)
{
d<-dominance*runif(n=1,min=-0.5-overdominance,max=0.5+overdominance)
gvalues[A,D,L]<-(0.5-d)*gvalues[A,A,L]+(0.5+d)*gvalues[D,D,L] # mean of additive effects + dominance, over diagonal
gvalues[D,A,L]<-(0.5-d)*gvalues[A,A,L]+(0.5+d)*gvalues[D,D,L] # the same below diagonal
}
}
}
nbIndividuals<-100
meanInds<-vector(length=nbIndividuals) # just a basic draw of individual genotypic values
for (beast in 1:nbIndividuals)
{
ind<-vector(length=0)
for (L in 1:nbLoci)
{
allele1<-floor(runif(n=1,min=1,max=nbAlleles+1))
allele2<-floor(runif(n=1,min=1,max=nbAlleles+1))
ind<-c(ind,gvalues[allele1,allele2,L])
}
meanInds[beast]<-mean(ind)
}
plot(meanInds) # and a visualisation of it
mean(meanInds)
var(meanInds)
nbIndividuals<-100
meanInds<-vector(length=nbIndividuals) # just a basic draw of individual genotypic values
for (beast in 1:nbIndividuals)
{
ind<-vector(length=0)
for (L in 1:nbLoci)
{
allele1<-floor(runif(n=1,min=1,max=nbAlleles+1))
allele2<-floor(runif(n=1,min=1,max=nbAlleles+1))
ind<-c(ind,gvalues[allele1,allele2,L])
}
meanInds[beast]<-mean(ind)
}
plot(meanInds) # and a visualisation of it
mean(meanInds)
var(meanInds)
gvalues
MeanBirthSize<-5
source('~/.active-rstudio-document', echo=TRUE)
gvalues[ .Object@DNA[1,], .Object@DNA[2,], Locus]
source('~/.active-rstudio-document', echo=TRUE)
popfile<-read.table(file="pop.csv",header=T)
plot(popfile$z,x=popfile$age)
library(lme4)
mm0<-lmer(z~1+age+s+(1|ID),data=popfile)
summary(mm0)
mvalues<-rnorm(n=100,mean=0,sd=1)
mvalues<-rnorm(n=100,mean=5,sd=1)
qvalues<-(mvalues-5)
svalues<-exp(qvalues)/(1+exp(qvalues))
svalues
svalues<-exp(qvalues)/(1+exp(qvalues))-0.5
svalues
plot(svalues)
plot(svalues,mvalues)
(mvalues-5)^2
mvalues<-rnorm(n=100,mean=5,sd=1)
qvalues<-(mvalues-5)-(mvalues-5)^2
svalues<-exp(qvalues)/(1+exp(qvalues))-0.5
plot(svalues,mvalues)
plot(svalues,x=mvalues)
mvalues<-rnorm(n=100,mean=5,sd=1)
qvalues<-(mvalues-5)-0.1*(mvalues-5)^2
svalues<-exp(qvalues)/(1+exp(qvalues))-0.5
plot(svalues,x=mvalues)
qvalues<-(mvalues)-0.1*(mvalues)^2
svalues<-exp(qvalues)/(1+exp(qvalues))-0.5
plot(svalues,x=mvalues)
mvalues<-rnorm(n=100,mean=5,sd=1)
qvalues<-(mvalues-5)-0.1*(mvalues-5)^2
svalues<-exp(qvalues)/(1+exp(qvalues))
plot(svalues,x=mvalues)
mvalues<-rnorm(n=100,mean=5,sd=1)
qvalues<-(mvalues-5)-0.8*(mvalues-5)^2
svalues<-exp(qvalues)/(1+exp(qvalues))
plot(svalues,x=mvalues)
plot(svalues-mean(svalues),x=mvalues)
mean(svalues)
plogit<-log(p)/(log(1-p))
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
plogit<-log(p)/(log(1-p))
mvalues<-rnorm(n=100,mean=5,sd=1)
qvalues<-(mvalues-5)-0.2*(mvalues-5)^2
svalues<-exp(qvalues)/(1+exp(qvalues))
plot(svalues-mean(svalues),x=mvalues)
mvalues<-rnorm(n=100,mean=5,sd=1)
qvalues<-(mvalues-5)-0.5*(mvalues-5)^2
svalues<-exp(qvalues)/(1+exp(qvalues))
plot(svalues-mean(svalues),x=mvalues)
plot(svalues,x=mvalues)
qvalues<-0.1*(mvalues-5)-0.5*(mvalues-5)^2
svalues<-exp(qvalues)/(1+exp(qvalues))
plot(svalues,x=mvalues)
qvalues<-0.1*(mvalues-5)-0.01*(mvalues-5)^2
svalues<-exp(qvalues)/(1+exp(qvalues))
plot(svalues,x=mvalues)
SurvivalSelection1<-0.1 #linear coefficient on a logit scale for Survival ~ ... + size +size^2
SurvivalSelection2<-0.02 #quadratic coefficient on a logit scale for Survival ~ ... + size + size^2
source('~/.active-rstudio-document', echo=TRUE)
bathtub<-function(age,size){
sizedeviation<-size-MeanBirthSize
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
plogit<-log(p)/(log(1-p))
Philogit<-plogit+SurvivalSelection1*sizedeviation+SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+Philogit)
p[p>1]<-1
return(p)
}
phi<cbind(sizes,rep(NA,length(sizes)))
phi<-cbind(sizes,rep(NA,length(sizes)))
sizes<-seq(2,10,by=0.1)
phi<-cbind(sizes,rep(NA,length(sizes)))
phi
sizes<-seq(2,10,by=0.1)
phi<-cbind(sizes,rep(NA,length(sizes)))
for (size in 1:length(sizes))
{
phi[size,2]<-c(phi,bathtub(1,sizes)
}
sizes<-seq(2,10,by=0.1)
phi<-cbind(sizes,rep(NA,length(sizes)))
for (size in 1:length(sizes))
{
phi[size,2]<-bathtub(1,sizes)
}
phi<-cbind(sizes,rep(NA,length(sizes)))
for (size in 1:length(sizes))
{
phi[size,2]<-bathtub(1,sizes[size])
}
plot(phi[,1],phi$[,2])
plot(phi[,1],phi[,2])
age=1
size=2
sizedeviation<-size-MeanBirthSize
sizedeviation
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p
plogit<-log(p)/(log(1-p))
plogit
Philogit<-plogit+SurvivalSelection1*sizedeviation+SurvivalSelection2*sizedeviation^2
Philogit
bathtub<-function(age,size){
sizedeviation<-size-MeanBirthSize
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
plogit<-log(p)/(log(1-p))
Philogit<-plogit+SurvivalSelection1*sizedeviation+SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
p[p>1]<-1
return(p)
}
sizes<-seq(2,10,by=0.1)
phi<-cbind(sizes,rep(NA,length(sizes)))
for (size in 1:length(sizes))
{
phi[size,2]<-bathtub(1,sizes[size])
}
plot(phi[,1],phi[,2])
for (size in 1:length(sizes))
{
phi[size,2]<-bathtub(5,sizes[size])
}
plot(phi[,1],phi[,2])
for (size in 1:length(sizes))
{
phi[size,2]<-bathtub(15,sizes[size])
}
plot(phi[,1],phi[,2])
phi<-cbind(sizes,rep(NA,length(sizes)))
for (size in 1:length(sizes))
{
phi[size,2]<-bathtub(19,sizes[size])
}
plot(phi[,1],phi[,2])
sizes<-seq(2,10,by=0.1)
phi<-cbind(sizes,rep(NA,length(sizes)))
for (size in 1:length(sizes))
{
phi[size,2]<-bathtub(20,sizes[size])
}
plot(phi[,1],phi[,2])
age=20
size=2
sizedeviation<-size-MeanBirthSize
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
bathtub<-function(age,size){
sizedeviation<-size-MeanBirthSize
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
plogit<-log(p)/(log(1-p))
Philogit<-plogit+SurvivalSelection1*sizedeviation+SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
return(p)
}
sizes<-seq(2,10,by=0.1)
phi<-cbind(sizes,rep(NA,length(sizes)))
for (size in 1:length(sizes))
{
phi[size,2]<-bathtub(20,sizes[size])
}
plot(phi[,1],phi[,2])
sizedeviation<-size-MeanBirthSize
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
plogit<-log(p)/(log(1-p))
Philogit<-plogit+SurvivalSelection1*sizedeviation+SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
p
size=10
sizedeviation<-size-MeanBirthSize
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
plogit<-log(p)/(log(1-p))
Philogit<-plogit+SurvivalSelection1*sizedeviation+SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
p
bathtub<-function(age,size){
sizedeviation<-size-MeanBirthSize
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
plogit<-log(p)/(log(1-p))
Philogit<-plogit-SurvivalSelection1*sizedeviation-SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
return(p)
}
sizes<-seq(2,10,by=0.1)
phi<-cbind(sizes,rep(NA,length(sizes)))
for (size in 1:length(sizes))
{
phi[size,2]<-bathtub(20,sizes[size])
}
plot(phi[,1],phi[,2])
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p
p[p>1]<-1
p
plogit<-log(p)/(log(1-p))
plogit
log(1-p)
log(p)
age=19
sizedeviation<-size-MeanBirthSize
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
plogit<-log(p)/(log(1-p))
sizes<-seq(2,10,by=0.1)
phi<-cbind(sizes,rep(NA,length(sizes)))
for (size in 1:length(sizes))
{
phi[size,2]<-bathtub(19,sizes[size])
}
plot(phi[,1],phi[,2])
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
plogit<-log(p)/(log(1-p))
p
plogit
bathtub<-function(age,size){
sizedeviation<-size-MeanBirthSize
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
plogit<-log(p/(1-p))
Philogit<-plogit-SurvivalSelection1*sizedeviation-SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
return(p)
}
sizes<-seq(2,10,by=0.1)
phi<-cbind(sizes,rep(NA,length(sizes)))
for (size in 1:length(sizes))
{
phi[size,2]<-bathtub(19,sizes[size])
}
plot(phi[,1],phi[,2])
age=20
sizes<-seq(2,10,by=0.1)
phi<-cbind(sizes,rep(NA,length(sizes)))
for (size in 1:length(sizes))
{
phi[size,2]<-bathtub(age,sizes[size])
}
plot(phi[,1],phi[,2])
sizedeviation<-size-MeanBirthSize
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
plogit<-log(p/(1-p))
plogit
p
source('~/.active-rstudio-document', echo=TRUE)
mm0<-lmer(z~1+age+s+(1|ID),data=popfile)
summary(mm0)
SurvivalSelection2<-(-0.02) #quadratic coefficient on a logit scale for Survival ~ ... + size + size^2; negative value=balancing selection
bathtub<-function(age,size){
sizedeviation<-size-MeanBirthSize
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
if(p<1)#size does not prevent animals of maximal age to die
{
plogit<-log(p/(1-p))
Philogit<-plogit-SurvivalSelection1*sizedeviation-SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
}
return(p)
}
sizes<-seq(2,10,by=0.1)
phi<-cbind(sizes,rep(NA,length(sizes)))
for (size in 1:length(sizes))
{
phi[size,2]<-bathtub(age,sizes[size])
}
plot(phi[,1],phi[,2])
bathtub<-function(age,size){
sizedeviation<-size-MeanBirthSize
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
if(p<1)#size does not prevent animals of maximal age to die
{
plogit<-log(p/(1-p))
Philogit<-plogit-SurvivalSelection1*sizedeviation-SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
}
return(p)
}
sizes<-seq(2,10,by=0.1)
phi<-cbind(sizes,rep(NA,length(sizes)))
for (size in 1:length(sizes))
{
phi[size,2]<-bathtub(age,sizes[size])
}
plot(phi[,1],phi[,2])
age=10
age=10
size=10
sizedeviation<-size-MeanBirthSize
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
if(p<1)#size does not prevent animals of maximal age to die
{
plogit<-log(p/(1-p))
Philogit<-plogit-SurvivalSelection1*sizedeviation-SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
}
p
bathtub<-function(age,size){
sizedeviation<-size-MeanBirthSize
p<-0.6*exp(-age/4)+(-1+exp(age*log(2)/20))
p[p>1]<-1
if(p<1)#size does not prevent animals of maximal age to die
{
plogit<-log(p/(1-p))
Philogit<-plogit-SurvivalSelection1*sizedeviation-SurvivalSelection2*sizedeviation^2
p<-exp(Philogit)/(1+exp(Philogit))
}
return(p)
}
sizes<-seq(2,10,by=0.1)
phi<-cbind(sizes,rep(NA,length(sizes)))
for (size in 1:length(sizes))
{
phi[size,2]<-bathtub(age,sizes[size])
}
plot(phi[,1],phi[,2])
sizes<-seq(2,10,by=0.1)
phi<-cbind(sizes,rep(NA,length(sizes)))
for (size in 1:length(sizes))
{
phi[size,2]<-1-bathtub(age,sizes[size])
}
plot(phi[,1],phi[,2])
runif(1,1,1.2)
mean(runif(1000,1,1.2))
mean(runif(100000,1,1.2))
meanGrowth<-mean(runif(10000,lowBoundGrowth,highBoundGrowth))
lowBoundGrowth<-1
highBoundGrowth<-1.2
meanGrowth<-mean(runif(10000,lowBoundGrowth,highBoundGrowth))
sizedeviation<-size-(MeanBirthSize*meanGrowth^age)
sizedeviation
(MeanBirthSize*meanGrowth^age)
size
size=10
sizedeviation<-size-(MeanBirthSize*meanGrowth^age)
sizedeviation
meanGrowth^age
source('~/GitHub/Dataset.R/data.R', echo=TRUE)
sizeDeviation<-Object@size-MeanBirthSize*meanGrowth^Object@age
lambda<-exp(log(MeanRepro)+fertilitySelection1*sizeDeviation+fertilitySelection2*sizeDeviation^2
source('~/.active-rstudio-document', echo=TRUE)
sizeDeviation<-seq(-2,2,0.1)
lambda<-exp(log(MeanRepro)+fertilitySelection1*sizeDeviation+fertilitySelection2*sizeDeviation^2)
repro<-rpois(n=1,lambda=lambda)
plot(repro,sizeDeviation)
sizeDeviation<-seq(-2,2,0.1)
lambda<-exp(log(MeanRepro)+fertilitySelection1*sizeDeviation+fertilitySelection2*sizeDeviation^2)
plot(lambda,sizeDeviation)
mean(lambda)
lambda<-exp(log(MeanRepro)+0.1*sizeDeviation-0.01*sizeDeviation^2)
plot(lambda,sizeDeviation)
mean(lambda)
source('~/GitHub/Dataset.R/data.R', echo=TRUE)
source('~/GitHub/Dataset.R/data.R', echo=TRUE)
popfile<-read.table(file="pop.csv",header=T)
plot(popfile$z,x=popfile$age)
set.seed(12)
source('~/.active-rstudio-document', echo=TRUE)
popfile<-read.table(file="pop.csv",header=T)
plot(popfile$z,x=popfile$age)
source('~/.active-rstudio-document', echo=TRUE)
popfile<-read.table(file="pop.csv",header=T)
plot(popfile$z,x=popfile$age)
source('~/.active-rstudio-document', echo=TRUE)
nbIndividuals<-100
meanInds<-vector(length=nbIndividuals) # just a basic draw of individual genotypic values
for (beast in 1:nbIndividuals)
{
ind<-vector(length=0)
for (L in 1:nbLoci)
{
allele1<-floor(runif(n=1,min=1,max=nbAlleles+1))
allele2<-floor(runif(n=1,min=1,max=nbAlleles+1))
ind<-c(ind,gvalues[L,allele1,allele2])
}
meanInds[beast]<-mean(ind)
}
plot(meanInds) # and a visualisation of it
mean(meanInds)
var(meanInds)
nbIndividuals<-100
meanInds<-vector(length=nbIndividuals) # just a basic draw of individual genotypic values
for (beast in 1:nbIndividuals)
{
ind<-vector(length=0)
for (L in 1:nbLoci)
{
allele1<-floor(runif(n=1,min=1,max=nbAlleles+1))
allele2<-floor(runif(n=1,min=1,max=nbAlleles+1))
ind<-c(ind,gvalues[allele1,allele2,L])
}
meanInds[beast]<-mean(ind)
}
plot(meanInds) # and a visualisation of it
mean(meanInds)
var(meanInds)
nbIndividuals<-100
meanInds<-vector(length=nbIndividuals) # just a basic draw of individual genotypic values
for (beast in 1:nbIndividuals)
{
ind<-vector(length=0)
for (L in 1:nbLoci)
{
allele1<-floor(runif(n=1,min=1,max=nbAlleles+1))
allele2<-floor(runif(n=1,min=1,max=nbAlleles+1))
ind<-c(ind,gvalues[allele1,allele2,L])
}
meanInds[beast]<-sum(ind)
}
plot(meanInds) # and a visualisation of it
mean(meanInds)
var(meanInds)
source('~/GitHub/Dataset.R/data.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
popfile<-read.table(file="pop.csv",header=T)
plot(popfile$z,x=popfile$age)
library(lme4)
mm0<-lmer(z~1+age+s+(1|ID),data=popfile)
summary(mm0)
mm0<-lmer(z~1+age+t+s+(1|ID),data=popfile)
summary(mm0)
